<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>对于所有对象都通用的方法</title>
      <link href="/2019/07/18/book/effective-java/3.%E5%AF%B9%E4%BA%8E%E6%89%80%E6%9C%89%E5%AF%B9%E8%B1%A1%E9%83%BD%E9%80%9A%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2019/07/18/book/effective-java/3.%E5%AF%B9%E4%BA%8E%E6%89%80%E6%9C%89%E5%AF%B9%E8%B1%A1%E9%83%BD%E9%80%9A%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-对于所有对象都通用的方法"><a href="#第三章-对于所有对象都通用的方法" class="headerlink" title="第三章 对于所有对象都通用的方法"></a>第三章 对于所有对象都通用的方法</h1><h2 id="8-实现高质量equals方法的诀窍"><a href="#8-实现高质量equals方法的诀窍" class="headerlink" title="8. 实现高质量equals方法的诀窍"></a>8. 实现高质量equals方法的诀窍</h2><ol><li>使用==操作符检查“参数是否为这个对象的引用”，如果是，返回true；</li><li>使用instanceof操作符检查“参数是否为正确类型”，所谓正确类型，是指equals所在的类，有些情况下是指该类实现的某个接口；</li><li>把参数转换成正确类型，因为转换之前进行过instanceof的测试，所以会确保成功；</li><li>对于该类中的每个“关键”域，检查参数中的域是否与该对象对应的域相匹配；为了获得最佳的性能，应该优先比较最可能不一致的域；</li><li>编写完的equals方法要保证：对称性、一致性、传递性；</li><li>覆盖equals时总要覆盖hashCode</li><li>不要将equals方法中的Object对象替换为其他类型的对象；</li></ol><h2 id="9-覆盖equals时总要覆盖hashCode"><a href="#9-覆盖equals时总要覆盖hashCode" class="headerlink" title="9. 覆盖equals时总要覆盖hashCode"></a>9. 覆盖equals时总要覆盖hashCode</h2><ol><li>equals相同，hashcode一定相同；</li><li>equals不同，hashcode不一定不同；</li><li>一个好的散列函数通常倾向于“为不相等的对象产生不相等的散列码”；</li></ol><h2 id="10-始终要覆盖toString"><a href="#10-始终要覆盖toString" class="headerlink" title="10. 始终要覆盖toString"></a>10. 始终要覆盖toString</h2><h2 id="11-谨慎的覆盖clone"><a href="#11-谨慎的覆盖clone" class="headerlink" title="11. 谨慎的覆盖clone"></a>11. 谨慎的覆盖clone</h2><blockquote><p>尤其是对象的属性是引用类型的，需要手动来深度拷贝</p></blockquote><h2 id="12-考虑实现comparable接口"><a href="#12-考虑实现comparable接口" class="headerlink" title="12. 考虑实现comparable接口"></a>12. 考虑实现comparable接口</h2>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> effective java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建和销毁对象</title>
      <link href="/2019/07/18/book/effective-java/2.%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/07/18/book/effective-java/2.%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-创建和销毁对象"><a href="#第二章-创建和销毁对象" class="headerlink" title="第二章 创建和销毁对象"></a>第二章 创建和销毁对象</h1><h2 id="1-考虑用静态工厂方法代替构造器"><a href="#1-考虑用静态工厂方法代替构造器" class="headerlink" title="1.考虑用静态工厂方法代替构造器"></a>1.考虑用静态工厂方法代替构造器</h2><blockquote><h4 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h4></blockquote><ul><li>有名称，易于理解</li><li>可以重复利用对象，避免创建重复的对象</li><li>可以返回原返回类型的任何子类型对象</li></ul><h2 id="2-遇到多个构造器参数时要考虑用构建器"><a href="#2-遇到多个构造器参数时要考虑用构建器" class="headerlink" title="2.遇到多个构造器参数时要考虑用构建器"></a>2.遇到多个构造器参数时要考虑用构建器</h2><blockquote><h4 id="三种模式："><a href="#三种模式：" class="headerlink" title="三种模式："></a>三种模式：</h4></blockquote><h5 id="1-构造器模式"><a href="#1-构造器模式" class="headerlink" title="1. 构造器模式"></a>1. 构造器模式</h5><ul><li>当很多参数的时候，难编写，难阅读</li></ul><h5 id="2-JavaBeans模式"><a href="#2-JavaBeans模式" class="headerlink" title="2. JavaBeans模式"></a>2. JavaBeans模式</h5><ul><li>调用无参构造器创建对象，然后调用setter方法赋值</li><li>弥补构造器模式的缺点，创建对象容易，易阅读</li><li>set过程被分到几个调用中，JavaBean可能处于不一致状态，需要额外保证线程安全<h5 id="3-Builder模式"><a href="#3-Builder模式" class="headerlink" title="3. Builder模式"></a>3. Builder模式</h5></li><li>客户端利用所有必要的参数调用构造器得到builder对象，然后客户端在builder对象上调用类似setter的方法，来设置可选的参数，最后客户端调用无参的build方法生成不可变对象。</li></ul><blockquote><p>示例</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Builder Pattern - Pages 14-15</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NutritionFacts</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> servingSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> servings<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> calories<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> fat<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> sodium<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> carbohydrate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Required parameters</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> servingSize<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> servings<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Optional parameters - initialized to default values</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> calories      <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> fat           <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> carbohydrate  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> sodium        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token keyword">int</span> servingSize<span class="token punctuation">,</span> <span class="token keyword">int</span> servings<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>servingSize <span class="token operator">=</span> servingSize<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>servings    <span class="token operator">=</span> servings<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">calories</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>            <span class="token punctuation">{</span> calories <span class="token operator">=</span> val<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">fat</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>            <span class="token punctuation">{</span> fat <span class="token operator">=</span> val<span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">carbohydrate</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>            <span class="token punctuation">{</span> carbohydrate <span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> Builder <span class="token function">sodium</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>            <span class="token punctuation">{</span> sodium <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> NutritionFacts <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NutritionFacts</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">NutritionFacts</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        servingSize  <span class="token operator">=</span> builder<span class="token punctuation">.</span>servingSize<span class="token punctuation">;</span>        servings     <span class="token operator">=</span> builder<span class="token punctuation">.</span>servings<span class="token punctuation">;</span>        calories     <span class="token operator">=</span> builder<span class="token punctuation">.</span>calories<span class="token punctuation">;</span>        fat          <span class="token operator">=</span> builder<span class="token punctuation">.</span>fat<span class="token punctuation">;</span>        sodium       <span class="token operator">=</span> builder<span class="token punctuation">.</span>sodium<span class="token punctuation">;</span>        carbohydrate <span class="token operator">=</span> builder<span class="token punctuation">.</span>carbohydrate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        NutritionFacts cocaCola <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NutritionFacts<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>            <span class="token function">calories</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sodium</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">carbohydrate</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-用私有构造器或枚举类型强化singleton属性"><a href="#3-用私有构造器或枚举类型强化singleton属性" class="headerlink" title="3. 用私有构造器或枚举类型强化singleton属性"></a>3. 用私有构造器或枚举类型强化singleton属性</h2><blockquote><h4 id="Singleton指仅被实例化一次的类"><a href="#Singleton指仅被实例化一次的类" class="headerlink" title="Singleton指仅被实例化一次的类"></a>Singleton指仅被实例化一次的类</h4></blockquote><ul><li>包含单个元素的枚举类型也可以实现Singleton</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Elvis <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leaveTheBuilding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-通过私有构造器强化不可实例化的能力"><a href="#4-通过私有构造器强化不可实例化的能力" class="headerlink" title="4. 通过私有构造器强化不可实例化的能力"></a>4. 通过私有构造器强化不可实例化的能力</h2><ul><li>例如：java.util.Arrays，java.util.Collections</li><li>企图通过将类做成抽象类来强制该类不可被实例化，这是行不通的。该类可以被子类化，且子类可以被实例化，这样做甚至会误导用户以为该类是为了继承而设计。</li></ul><h2 id="5-避免创建不必要的对象"><a href="#5-避免创建不必要的对象" class="headerlink" title="5. 避免创建不必要的对象"></a>5. 避免创建不必要的对象</h2><h2 id="6-消除过期的对象引用"><a href="#6-消除过期的对象引用" class="headerlink" title="6. 消除过期的对象引用"></a>6. 消除过期的对象引用</h2><h2 id="7-避免使用终结方法"><a href="#7-避免使用终结方法" class="headerlink" title="7. 避免使用终结方法"></a>7. 避免使用终结方法</h2>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> effective java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
